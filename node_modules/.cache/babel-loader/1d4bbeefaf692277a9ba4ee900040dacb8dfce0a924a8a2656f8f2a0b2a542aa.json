{"ast":null,"code":"var _jsxFileName = \"/Users/nimo/Desktop/react-web-service-prac/src/routes/Todo.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { MemoizedTodoBox } from \"./TodoBox\";\nimport styles from \"../css/App.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Todo() {\n  _s();\n  // useState\n  const [input, setInput] = useState(\"\");\n  const [todoList, setTodoList] = useState(async () => {\n    const storedTodos = await localStorage.getItem(\"todoList\");\n    // storedTodos가 배열인지 확인하고, 아니면 빈 배열로 설정\n    return storedTodos ? JSON.parse(storedTodos) : [];\n  });\n\n  // 입력 필드 변화 처리\n  const onInputChange = e => {\n    setInput(e.target.value);\n    console.log(e.target.value);\n  };\n\n  // 새로운 TODO 항목 추가\n  const makeTodoBox = async () => {\n    if (input.trim() !== \"\") {\n      // todoList가 배열인지 확인하고 배열로 처리\n      if (!Array.isArray(todoList)) {\n        console.error(\"todoList is not an array. Resetting to empty array.\");\n        setTodoList([]);\n        return;\n      }\n      const newTodoList = await [...todoList, {\n        id: Date.now(),\n        content: input,\n        checked: false\n      } // 새 항목은 기본적으로 unchecked\n      ];\n      setTodoList(newTodoList); // 상태 업데이트\n      setInput(\"\"); // 입력 필드 초기화\n    }\n  };\n\n  // 체크박스 상태 변경\n  const changeCheckBox = id => {\n    if (!Array.isArray(todoList)) return; // 배열이 아니면 실행하지 않음\n\n    const updatedTodoList = todoList.map(async todo => await (todo.id === id ? {\n      ...todo,\n      checked: !todo.checked\n    } : todo));\n    setTodoList(updatedTodoList); // 상태 업데이트\n  };\n\n  // TODO 항목 삭제\n  const deleteTodoList = async id => {\n    if (!Array.isArray(todoList)) return; // 배열이 아니면 실행하지 않음\n\n    const updatedTodoList = await todoList.filter(todo => todo.id !== id);\n    setTodoList(updatedTodoList); // 상태 업데이트\n  };\n\n  // 로컬스토리지에 데이터 저장\n  useEffect(() => {\n    if (Array.isArray(todoList)) {\n      localStorage.setItem(\"todoList\", JSON.stringify(todoList));\n    }\n  }, [todoList]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.app,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.title,\n      children: \"Todo list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"todo-input-wrapper\",\n      style: {\n        display: \"row\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: input,\n        onChange: onInputChange,\n        className: styles.inputWrapper,\n        onKeyDown: e => {\n          if (e.key === \"Enter\") {\n            {\n              makeTodoBox;\n            }\n            ;\n            console.log(\"01: \", e.target.value);\n            setInput(\"\");\n            console.log(\"02: \", e.target.value);\n          }\n        },\n        placeholder: \"Write down your new TODOs! :)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: makeTodoBox,\n        className: styles.postButton,\n        children: \"post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 4\n    }, this), todoList.length > 0 &&\n    // todoList가 비어있지 않을 때만 map 실행\n    todoList.map(todo => /*#__PURE__*/_jsxDEV(MemoizedTodoBox, {\n      // 고유식별번호(꼭 넣어줘야함!!)\n      id: todo.id // id 전달\n      ,\n      value: todo.content,\n      checked: todo.checked // checked 상태 전달\n      ,\n      changeCheckBox: changeCheckBox // 함수 전달\n      ,\n      deleteTodoList: deleteTodoList // 함수 전달\n    }, todo.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 6\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 3\n  }, this);\n}\n_s(Todo, \"mGZRE8KPp5dDDTqRokZ7FMd3/cY=\");\n_c = Todo;\nexport default Todo;\nvar _c;\n$RefreshReg$(_c, \"Todo\");","map":{"version":3,"names":["useState","useEffect","MemoizedTodoBox","styles","jsxDEV","_jsxDEV","Todo","_s","input","setInput","todoList","setTodoList","storedTodos","localStorage","getItem","JSON","parse","onInputChange","e","target","value","console","log","makeTodoBox","trim","Array","isArray","error","newTodoList","id","Date","now","content","checked","changeCheckBox","updatedTodoList","map","todo","deleteTodoList","filter","setItem","stringify","className","app","children","title","fileName","_jsxFileName","lineNumber","columnNumber","style","display","onChange","inputWrapper","onKeyDown","key","placeholder","onClick","postButton","length","_c","$RefreshReg$"],"sources":["/Users/nimo/Desktop/react-web-service-prac/src/routes/Todo.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { MemoizedTodoBox } from \"./TodoBox\";\nimport styles from \"../css/App.module.css\";\n\nfunction Todo() {\n\t// useState\n\tconst [input, setInput] = useState(\"\");\n\tconst [todoList, setTodoList] = useState(async () => {\n\t\tconst storedTodos = await localStorage.getItem(\"todoList\");\n\t\t// storedTodos가 배열인지 확인하고, 아니면 빈 배열로 설정\n\t\treturn storedTodos ? JSON.parse(storedTodos) : [];\n\t});\n\n\t// 입력 필드 변화 처리\n\tconst onInputChange = (e) => {\n\t\tsetInput(e.target.value);\n\t\tconsole.log(e.target.value);\n\t};\n\n\t// 새로운 TODO 항목 추가\n\tconst makeTodoBox = async () => {\n\t\tif (input.trim() !== \"\") {\n\t\t\t// todoList가 배열인지 확인하고 배열로 처리\n\t\t\tif (!Array.isArray(todoList)) {\n\t\t\t\tconsole.error(\"todoList is not an array. Resetting to empty array.\");\n\t\t\t\tsetTodoList([]);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newTodoList = await [\n\t\t\t\t...todoList,\n\t\t\t\t{ id: Date.now(), content: input, checked: false }, // 새 항목은 기본적으로 unchecked\n\t\t\t];\n\t\t\tsetTodoList(newTodoList); // 상태 업데이트\n\t\t\tsetInput(\"\"); // 입력 필드 초기화\n\t\t}\n\t};\n\n\t// 체크박스 상태 변경\n\tconst changeCheckBox = (id) => {\n\t\tif (!Array.isArray(todoList)) return; // 배열이 아니면 실행하지 않음\n\n\t\tconst updatedTodoList = todoList.map(\n\t\t\tasync (todo) =>\n\t\t\t\tawait (todo.id === id ? { ...todo, checked: !todo.checked } : todo)\n\t\t);\n\t\tsetTodoList(updatedTodoList); // 상태 업데이트\n\t};\n\n\t// TODO 항목 삭제\n\tconst deleteTodoList = async (id) => {\n\t\tif (!Array.isArray(todoList)) return; // 배열이 아니면 실행하지 않음\n\n\t\tconst updatedTodoList = await todoList.filter((todo) => todo.id !== id);\n\t\tsetTodoList(updatedTodoList); // 상태 업데이트\n\t};\n\n\t// 로컬스토리지에 데이터 저장\n\tuseEffect(() => {\n\t\tif (Array.isArray(todoList)) {\n\t\t\tlocalStorage.setItem(\"todoList\", JSON.stringify(todoList));\n\t\t}\n\t}, [todoList]);\n\n\treturn (\n\t\t<div className={styles.app}>\n\t\t\t<div className={styles.title}>Todo list</div>\n\t\t\t<div\n\t\t\t\tid=\"todo-input-wrapper\"\n\t\t\t\tstyle={{ display: \"row\" }}>\n\t\t\t\t<input\n\t\t\t\t\tvalue={input}\n\t\t\t\t\tonChange={onInputChange}\n\t\t\t\t\tclassName={styles.inputWrapper}\n\t\t\t\t\tonKeyDown={(e) => {\n\t\t\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\t\t\t{makeTodoBox};\n\t\t\t\t\t\t\tconsole.log(\"01: \", e.target.value);\n\t\t\t\t\t\t\tsetInput(\"\");\n\t\t\t\t\t\t\tconsole.log(\"02: \", e.target.value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}}\n\t\t\t\t\tplaceholder=\"Write down your new TODOs! :)\"\n\t\t\t\t/>\n\t\t\t\t<button\n\t\t\t\t\tonClick={makeTodoBox}\n\t\t\t\t\tclassName={styles.postButton}>\n\t\t\t\t\tpost\n\t\t\t\t</button>\n\t\t\t</div>\n\n\t\t\t{todoList.length > 0 && // todoList가 비어있지 않을 때만 map 실행\n\t\t\t\ttodoList.map((todo) => (\n\t\t\t\t\t<MemoizedTodoBox\n\t\t\t\t\t\tkey={todo.id} // 고유식별번호(꼭 넣어줘야함!!)\n\t\t\t\t\t\tid={todo.id} // id 전달\n\t\t\t\t\t\tvalue={todo.content}\n\t\t\t\t\t\tchecked={todo.checked} // checked 상태 전달\n\t\t\t\t\t\tchangeCheckBox={changeCheckBox} // 함수 전달\n\t\t\t\t\t\tdeleteTodoList={deleteTodoList} // 함수 전달\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default Todo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}